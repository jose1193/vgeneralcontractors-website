<?php

namespace App\Http\Controllers;

use App\Http\Controllers\BaseController;
use App\Http\Requests\{{EntityName}}Request;
use App\Http\Resources\{{EntityName}}Resource;
use App\Services\{{EntityName}}Service;
use App\Models\{{EntityName}};
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;

class {{EntityName}}Controller extends BaseController
{
    public function __construct(
        private readonly {{EntityName}}Service ${{entityName}}Service
    ) {}

    /**
     * Display a listing of the resource.
     */
    public function index(Request $request): AnonymousResourceCollection
    {
        ${{entityNamePlural}} = $this->{{entityName}}Service->getAllPaginated(
            perPage: $request->get('per_page', 15),
            search: $request->get('search'),
            filters: $request->only(['user_id', 'status'])
        );

        return {{EntityName}}Resource::collection(${{entityNamePlural}});
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store({{EntityName}}Request $request): JsonResponse
    {
        ${{entityName}} = $this->{{entityName}}Service->create($request->validated());

        return $this->successResponse(
            data: new {{EntityName}}Resource(${{entityName}}),
            message: '{{EntityName}} created successfully',
            statusCode: 201
        );
    }

    /**
     * Display the specified resource.
     */
    public function show({{EntityName}} ${{entityName}}): JsonResponse
    {
        ${{entityName}}->load(['user']);
        
        return $this->successResponse(
            data: new {{EntityName}}Resource(${{entityName}}),
            message: '{{EntityName}} retrieved successfully'
        );
    }

    /**
     * Update the specified resource in storage.
     */
    public function update({{EntityName}}Request $request, {{EntityName}} ${{entityName}}): JsonResponse
    {
        $updated{{EntityName}} = $this->{{entityName}}Service->update(${{entityName}}, $request->validated());

        return $this->successResponse(
            data: new {{EntityName}}Resource($updated{{EntityName}}),
            message: '{{EntityName}} updated successfully'
        );
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{EntityName}} ${{entityName}}): JsonResponse
    {
        $this->{{entityName}}Service->delete(${{entityName}});

        return $this->successResponse(
            message: '{{EntityName}} deleted successfully'
        );
    }

    /**
     * Restore the specified resource from storage.
     */
    public function restore(string $uuid): JsonResponse
    {
        ${{entityName}} = $this->{{entityName}}Service->restore($uuid);

        return $this->successResponse(
            data: new {{EntityName}}Resource(${{entityName}}),
            message: '{{EntityName}} restored successfully'
        );
    }

    /**
     * Force delete the specified resource from storage.
     */
    public function forceDelete(string $uuid): JsonResponse
    {
        $this->{{entityName}}Service->forceDelete($uuid);

        return $this->successResponse(
            message: '{{EntityName}} permanently deleted'
        );
    }

    /**
     * Export {{entityNamePlural}} to Excel.
     */
    public function export(Request $request)
    {
        return $this->{{entityName}}Service->export(
            filters: $request->only(['user_id', 'status', 'date_from', 'date_to'])
        );
    }
}