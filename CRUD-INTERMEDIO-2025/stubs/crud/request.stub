<?php

namespace App\Http\Requests;

use Illuminate\Validation\Rule;

class {{EntityName}}Request extends BaseRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     */
    public function rules(): array
    {
        $rules = [
            'user_id' => ['sometimes', 'integer', 'exists:users,id'],
            {{validationRules}}
        ];

        // Apply different rules for update vs create
        if ($this->isMethod('PUT') || $this->isMethod('PATCH')) {
            $rules = $this->updateRules($rules);
        }

        return $rules;
    }

    /**
     * Get custom validation messages.
     */
    public function messages(): array
    {
        return [
            {{validationMessages}}
        ];
    }

    /**
     * Get custom attributes for validator errors.
     */
    public function attributes(): array
    {
        return [
            {{attributeLabels}}
        ];
    }

    /**
     * Prepare the data for validation.
     */
    protected function prepareForValidation(): void
    {
        // Set user_id from authenticated user if not provided
        if (!$this->has('user_id') && auth()->check()) {
            $this->merge([
                'user_id' => auth()->id()
            ]);
        }

        {{prepareForValidation}}
    }

    /**
     * Configure the validator instance.
     */
    public function withValidator($validator): void
    {
        $validator->after(function ($validator) {
            {{customValidation}}
        });
    }

    /**
     * Modify rules for update operations
     */
    private function updateRules(array $rules): array
    {
        // Make most fields optional for updates
        foreach ($rules as $field => $fieldRules) {
            if (is_array($fieldRules) && in_array('required', $fieldRules)) {
                $key = array_search('required', $fieldRules);
                $fieldRules[$key] = 'sometimes';
                $rules[$field] = $fieldRules;
            }
        }

        return $rules;
    }
}