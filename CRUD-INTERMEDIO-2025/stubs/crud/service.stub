<?php

namespace App\Services;

use App\Models\{{EntityName}};
use App\Repositories\Interfaces\{{EntityName}}RepositoryInterface;
use App\Services\{{EntityName}}ExportService;
use App\DTOs\{{EntityName}}DTO;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Exception;

class {{EntityName}}Service extends BaseService
{
    public function __construct(
        private readonly {{EntityName}}RepositoryInterface ${{entityName}}Repository,
        private readonly {{EntityName}}ExportService $exportService
    ) {}

    /**
     * Get all {{entityName}} records with pagination
     */
    public function getAllPaginated(
        int $perPage = 15,
        ?string $search = null,
        array $filters = []
    ): LengthAwarePaginator {
        $cacheKey = "{{entityName}}_paginated_{$perPage}_" . md5(serialize([$search, $filters]));
        
        return Cache::tags(['{{entityName}}'])->remember($cacheKey, 300, function () use ($perPage, $search, $filters) {
            return $this->{{entityName}}Repository->getAllPaginated($perPage, $search, $filters);
        });
    }

    /**
     * Create a new {{entityName}}
     */
    public function create(array $data): {{EntityName}}
    {
        try {
            DB::beginTransaction();

            // Validate business rules
            $this->validateBusinessRules($data);

            // Create DTO
            $dto = {{EntityName}}DTO::fromArray($data);

            // Create {{entityName}}
            ${{entityName}} = $this->{{entityName}}Repository->create($dto->toArray());

            // Clear cache
            Cache::tags(['{{entityName}}'])->flush();

            DB::commit();

            Log::info('{{EntityName}} created successfully', ['{{entityName}}_id' => ${{entityName}}->id]);

            return ${{entityName}}->load(['user']);
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('Error creating {{entityName}}', ['error' => $e->getMessage(), 'data' => $data]);
            throw $e;
        }
    }

    /**
     * Update an existing {{entityName}}
     */
    public function update({{EntityName}} ${{entityName}}, array $data): {{EntityName}}
    {
        try {
            DB::beginTransaction();

            // Validate business rules
            $this->validateBusinessRules($data, ${{entityName}});

            // Create DTO
            $dto = {{EntityName}}DTO::fromArray($data);

            // Update {{entityName}}
            $updated{{EntityName}} = $this->{{entityName}}Repository->update(${{entityName}}, $dto->toArray());

            // Clear cache
            Cache::tags(['{{entityName}}'])->flush();

            DB::commit();

            Log::info('{{EntityName}} updated successfully', ['{{entityName}}_id' => ${{entityName}}->id]);

            return $updated{{EntityName}}->load(['user']);
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('Error updating {{entityName}}', ['error' => $e->getMessage(), '{{entityName}}_id' => ${{entityName}}->id]);
            throw $e;
        }
    }

    /**
     * Delete a {{entityName}}
     */
    public function delete({{EntityName}} ${{entityName}}): bool
    {
        try {
            DB::beginTransaction();

            $result = $this->{{entityName}}Repository->delete(${{entityName}});

            // Clear cache
            Cache::tags(['{{entityName}}'])->flush();

            DB::commit();

            Log::info('{{EntityName}} deleted successfully', ['{{entityName}}_id' => ${{entityName}}->id]);

            return $result;
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('Error deleting {{entityName}}', ['error' => $e->getMessage(), '{{entityName}}_id' => ${{entityName}}->id]);
            throw $e;
        }
    }

    /**
     * Find {{entityName}} by UUID
     */
    public function findByUuid(string $uuid): ?{{EntityName}}
    {
        return Cache::tags(['{{entityName}}'])->remember(
            "{{entityName}}_{$uuid}",
            3600,
            fn() => $this->{{entityName}}Repository->findByUuid($uuid)
        );
    }

    /**
     * Restore soft deleted {{entityName}}
     */
    public function restore(string $uuid): ?{{EntityName}}
    {
        try {
            DB::beginTransaction();

            ${{entityName}} = $this->{{entityName}}Repository->restore($uuid);

            if (${{entityName}}) {
                // Clear cache
                Cache::tags(['{{entityName}}'])->flush();
                
                DB::commit();
                Log::info('{{EntityName}} restored successfully', ['{{entityName}}_uuid' => $uuid]);
            }

            return ${{entityName}};
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('Error restoring {{entityName}}', ['error' => $e->getMessage(), 'uuid' => $uuid]);
            throw $e;
        }
    }

    /**
     * Force delete {{entityName}}
     */
    public function forceDelete(string $uuid): bool
    {
        try {
            DB::beginTransaction();

            $result = $this->{{entityName}}Repository->forceDelete($uuid);

            // Clear cache
            Cache::tags(['{{entityName}}'])->flush();

            DB::commit();

            Log::info('{{EntityName}} force deleted successfully', ['{{entityName}}_uuid' => $uuid]);

            return $result;
        } catch (Exception $e) {
            DB::rollBack();
            Log::error('Error force deleting {{entityName}}', ['error' => $e->getMessage(), 'uuid' => $uuid]);
            throw $e;
        }
    }

    /**
     * Export {{entityName}} records
     */
    public function export(array $filters = [])
    {
        return $this->exportService->export($filters);
    }

    /**
     * Validate business rules
     */
    private function validateBusinessRules(array $data, ?{{EntityName}} ${{entityName}} = null): void
    {
        {{businessRules}}
    }
}