<?php

namespace App\Services;

use App\Exports\{{EntityName}}Export;
use App\Repositories\Interfaces\{{EntityName}}RepositoryInterface;
use Maatwebsite\Excel\Facades\Excel;
use Symfony\Component\HttpFoundation\BinaryFileResponse;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;

class {{EntityName}}ExportService extends BaseExportService
{
    public function __construct(
        private readonly {{EntityName}}RepositoryInterface ${{entityName}}Repository
    ) {}

    /**
     * Export {{entityName}} data to Excel
     */
    public function export(array $filters = []): BinaryFileResponse
    {
        try {
            // Get data for export
            ${{entityNamePlural}} = $this->{{entityName}}Repository->getForExport($filters);

            // Generate filename
            $filename = $this->generateFilename('{{entityNamePlural}}');

            // Log export activity
            Log::info('{{EntityName}} export started', [
                'user_id' => auth()->id(),
                'filters' => $filters,
                'total_records' => ${{entityNamePlural}}->count(),
                'filename' => $filename
            ]);

            // Create and download export
            return Excel::download(
                new {{EntityName}}Export(${{entityNamePlural}}),
                $filename,
                \Maatwebsite\Excel\Excel::XLSX
            );
        } catch (\Exception $e) {
            Log::error('{{EntityName}} export failed', [
                'user_id' => auth()->id(),
                'error' => $e->getMessage(),
                'filters' => $filters
            ]);
            
            throw $e;
        }
    }

    /**
     * Export {{entityName}} data to CSV
     */
    public function exportToCsv(array $filters = []): BinaryFileResponse
    {
        try {
            ${{entityNamePlural}} = $this->{{entityName}}Repository->getForExport($filters);
            $filename = $this->generateFilename('{{entityNamePlural}}', 'csv');

            Log::info('{{EntityName}} CSV export started', [
                'user_id' => auth()->id(),
                'filters' => $filters,
                'total_records' => ${{entityNamePlural}}->count(),
                'filename' => $filename
            ]);

            return Excel::download(
                new {{EntityName}}Export(${{entityNamePlural}}),
                $filename,
                \Maatwebsite\Excel\Excel::CSV
            );
        } catch (\Exception $e) {
            Log::error('{{EntityName}} CSV export failed', [
                'user_id' => auth()->id(),
                'error' => $e->getMessage(),
                'filters' => $filters
            ]);
            
            throw $e;
        }
    }

    /**
     * Store export file and return path
     */
    public function storeExport(array $filters = []): string
    {
        try {
            ${{entityNamePlural}} = $this->{{entityName}}Repository->getForExport($filters);
            $filename = $this->generateFilename('{{entityNamePlural}}');
            $path = 'exports/' . $filename;

            // Store file
            Excel::store(
                new {{EntityName}}Export(${{entityNamePlural}}),
                $path,
                'local',
                \Maatwebsite\Excel\Excel::XLSX
            );

            Log::info('{{EntityName}} export stored', [
                'user_id' => auth()->id(),
                'filters' => $filters,
                'total_records' => ${{entityNamePlural}}->count(),
                'path' => $path
            ]);

            return Storage::path($path);
        } catch (\Exception $e) {
            Log::error('{{EntityName}} export storage failed', [
                'user_id' => auth()->id(),
                'error' => $e->getMessage(),
                'filters' => $filters
            ]);
            
            throw $e;
        }
    }

    /**
     * Get export statistics
     */
    public function getExportStats(array $filters = []): array
    {
        ${{entityNamePlural}} = $this->{{entityName}}Repository->getForExport($filters);

        return [
            'total_records' => ${{entityNamePlural}}->count(),
            'active_records' => ${{entityNamePlural}}->whereNull('deleted_at')->count(),
            'inactive_records' => ${{entityNamePlural}}->whereNotNull('deleted_at')->count(),
            'date_range' => [
                'from' => ${{entityNamePlural}}->min('created_at'),
                'to' => ${{entityNamePlural}}->max('created_at')
            ],
            'users_count' => ${{entityNamePlural}}->pluck('user_id')->unique()->count(),
            'estimated_file_size' => $this->estimateFileSize(${{entityNamePlural}}->count())
        ];
    }

    /**
     * Generate filename for export
     */
    private function generateFilename(string $prefix, string $extension = 'xlsx'): string
    {
        $timestamp = Carbon::now()->format('Y-m-d_H-i-s');
        $user = auth()->user();
        $userId = $user ? $user->id : 'guest';
        
        return "{$prefix}_export_{$timestamp}_user_{$userId}.{$extension}";
    }

    /**
     * Estimate file size based on record count
     */
    private function estimateFileSize(int $recordCount): string
    {
        // Rough estimation: ~1KB per record for Excel files
        $sizeInBytes = $recordCount * 1024;
        
        if ($sizeInBytes < 1024) {
            return $sizeInBytes . ' B';
        } elseif ($sizeInBytes < 1048576) {
            return round($sizeInBytes / 1024, 2) . ' KB';
        } else {
            return round($sizeInBytes / 1048576, 2) . ' MB';
        }
    }
}